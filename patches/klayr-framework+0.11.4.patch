diff --git a/node_modules/klayr-framework/dist-node/application.d.ts b/node_modules/klayr-framework/dist-node/application.d.ts
index 2a3ee8a..207625f 100644
--- a/node_modules/klayr-framework/dist-node/application.d.ts
+++ b/node_modules/klayr-framework/dist-node/application.d.ts
@@ -42,6 +42,7 @@ export declare class Application {
     static defaultApplication(config?: PartialApplicationConfig, mainchain?: boolean): DefaultApplication;
     registerPlugin(plugin: BasePlugin<any>, options?: PluginConfig): void;
     registerModule(Module: BaseModule): void;
+    registerModulePriority(Module: BaseModule): void;
     registerInteroperableModule(interoperableModule: BaseInteroperableModule): void;
     getRegisteredModules(): BaseModule[];
     getMetadata(): ModuleMetadataJSON[];
diff --git a/node_modules/klayr-framework/dist-node/application.js b/node_modules/klayr-framework/dist-node/application.js
index 4aece0e..516380a 100644
--- a/node_modules/klayr-framework/dist-node/application.js
+++ b/node_modules/klayr-framework/dist-node/application.js
@@ -133,6 +133,9 @@ class Application {
     registerModule(Module) {
         this._registerModule(Module);
     }
+    registerModulePriority(Module) {
+        this._registerModulePriority(Module);
+    }
     registerInteroperableModule(interoperableModule) {
         const interoperabilityModule = this._registeredModules.find(module => module.name === interoperability_1.MODULE_NAME_INTEROPERABILITY);
         if (interoperabilityModule === undefined) {
@@ -237,6 +240,15 @@ class Application {
         this._stateMachine.registerModule(mod);
         this._controller.registerEndpoint(mod.name, (0, endpoint_1.getEndpointHandlers)(mod.endpoint));
     }
+    _registerModulePriority(mod) {
+        assert(mod, 'Module implementation is required');
+        if (Object.keys(this._controller.getRegisteredPlugins()).includes(mod.name)) {
+            throw new Error(`A plugin with name "${mod.name}" is already registered.`);
+        }
+        this._registeredModules.unshift(mod);
+        this._stateMachine.registerModulePriority(mod);
+        this._controller.registerEndpoint(mod.name, (0, endpoint_1.getEndpointHandlers)(mod.endpoint));
+    }
     _initLogger() {
         var _a, _b;
         return (0, logger_1.createLogger)({
diff --git a/node_modules/klayr-framework/dist-node/modules/fee/module.js b/node_modules/klayr-framework/dist-node/modules/fee/module.js
index da24f74..53b884c 100644
--- a/node_modules/klayr-framework/dist-node/modules/fee/module.js
+++ b/node_modules/klayr-framework/dist-node/modules/fee/module.js
@@ -45,8 +45,11 @@ class FeeModule extends base_interoperable_module_1.BaseInteroperableModule {
         };
     }
     async init(args) {
+        // NOTE: dangerouslySkipBalanceVerification config is default to false
+        const dangerouslySkipBalanceVerification = false;
+        
         const defaultFeeTokenID = `${args.genesisConfig.chainID}${Buffer.alloc(4).toString('hex')}`;
-        const config = utils_1.objects.mergeDeep({}, { ...constants_1.defaultConfig, feeTokenID: defaultFeeTokenID }, args.moduleConfig);
+        const config = utils_1.objects.mergeDeep({}, { ...constants_1.defaultConfig, feeTokenID: defaultFeeTokenID, dangerouslySkipBalanceVerification }, args.moduleConfig);
         validator_1.validator.validate(schemas_1.configSchema, config);
         const moduleConfig = {
             ...config,
@@ -62,6 +65,7 @@ class FeeModule extends base_interoperable_module_1.BaseInteroperableModule {
         this._minFeePerByte = moduleConfig.minFeePerByte;
         this._maxBlockHeightZeroFeePerByte = moduleConfig.maxBlockHeightZeroFeePerByte;
         this._feePoolAddress = moduleConfig.feePoolAddress;
+        this._skipBalanceVerification = moduleConfig.dangerouslySkipBalanceVerification;
     }
     async verifyTransaction(context) {
         const { getMethodContext, transaction, header } = context;
@@ -69,10 +73,17 @@ class FeeModule extends base_interoperable_module_1.BaseInteroperableModule {
         if (transaction.fee < minFee) {
             throw new Error(`Insufficient transaction fee. Minimum required fee is ${minFee}.`);
         }
+
+        /* NOTE: 
+         * dangerouslySkipBalanceVerification is needed if other module is handling balance verification instead, for example fee_conversion module
+         * since the default is false, it will not interfere with other module implementations if it is not specified
+         */
+        
         const balance = await this._tokenMethod.getAvailableBalance(getMethodContext(), transaction.senderAddress, this._tokenID);
-        if (transaction.fee > balance) {
+        if (!this._skipBalanceVerification && transaction.fee > balance) {
             throw new Error(`Insufficient balance.`);
         }
+
         return { status: state_machine_1.VerifyStatus.OK };
     }
     async beforeCommandExecute(context) {
diff --git a/node_modules/klayr-framework/dist-node/state_machine/state_machine.d.ts b/node_modules/klayr-framework/dist-node/state_machine/state_machine.d.ts
index 1ee0809..51c1c41 100644
--- a/node_modules/klayr-framework/dist-node/state_machine/state_machine.d.ts
+++ b/node_modules/klayr-framework/dist-node/state_machine/state_machine.d.ts
@@ -12,6 +12,7 @@ export declare class StateMachine {
     private _logger;
     private _initialized;
     registerModule(mod: BaseModule): void;
+    registerModulePriority(mod: BaseModule): void;
     init(logger: Logger, genesisConfig: GenesisConfig, moduleConfig?: Record<string, Record<string, unknown>>): Promise<void>;
     executeGenesisBlock(ctx: GenesisBlockContext): Promise<void>;
     insertAssets(ctx: GenerationContext): Promise<void>;
diff --git a/node_modules/klayr-framework/dist-node/state_machine/state_machine.js b/node_modules/klayr-framework/dist-node/state_machine/state_machine.js
index dc24f4d..eb419c3 100644
--- a/node_modules/klayr-framework/dist-node/state_machine/state_machine.js
+++ b/node_modules/klayr-framework/dist-node/state_machine/state_machine.js
@@ -16,6 +16,10 @@ class StateMachine {
         this._validateExisting(mod);
         this._modules.push(mod);
     }
+    registerModulePriority(mod) {
+        this._validateExisting(mod);
+        this._modules.unshift(mod);
+    }
     async init(logger, genesisConfig, moduleConfig = {}) {
         var _a;
         this._logger = logger;
